// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gitlab.sz.sensetime.com/viper/commonapis/pb/commonapis.proto

package api // import "gitlab.sz.sensetime.com/viper/commonapis/api"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 图片格式.
// [EN] Image format.
type ImageFormat int32

const (
	// 未知格式.
	// [EN] Unspecified format.
	ImageFormat_IMAGE_UNKNOWN ImageFormat = 0
	// JPEG格式.
	// [EN] JPEG format.
	ImageFormat_IMAGE_JPEG ImageFormat = 1
	// PNG格式.
	// [EN] PNG format.
	ImageFormat_IMAGE_PNG ImageFormat = 2
	// BMP格式.
	// [EN] BMP format.
	ImageFormat_IMAGE_BMP ImageFormat = 3
	// TIFF格式.
	// [EN] TIFF format.
	ImageFormat_IMAGE_TIFF ImageFormat = 4
	// GIF格式.
	// [EN] GIF format.
	ImageFormat_IMAGE_GIF ImageFormat = 5
)

var ImageFormat_name = map[int32]string{
	0: "IMAGE_UNKNOWN",
	1: "IMAGE_JPEG",
	2: "IMAGE_PNG",
	3: "IMAGE_BMP",
	4: "IMAGE_TIFF",
	5: "IMAGE_GIF",
}
var ImageFormat_value = map[string]int32{
	"IMAGE_UNKNOWN": 0,
	"IMAGE_JPEG":    1,
	"IMAGE_PNG":     2,
	"IMAGE_BMP":     3,
	"IMAGE_TIFF":    4,
	"IMAGE_GIF":     5,
}

func (x ImageFormat) String() string {
	return proto.EnumName(ImageFormat_name, int32(x))
}
func (ImageFormat) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{0}
}

// VIPER平台支持物体对象类型.
// ObjectType与字符串表示的标准映射如下见对应枚举项注释.
// [EN] VIPER object types.
// The standard mapping between ObjectType and string representations is shown in the corresponding enumerations in the items below.
type ObjectType int32

const (
	// unknown. 未知.
	// [EN] unknown.
	ObjectType_OBJECT_UNKNOWN ObjectType = 0
	// face. 人脸. 输入和输出类型, 输入类型用于创建任务时的枚举, 输出类型用于输出数据对象的枚举.
	// [EN] face. Input and output types; input type is used for enumeration when creating tasks, while output type is used for enumeration when outputting data objects.
	ObjectType_OBJECT_FACE ObjectType = 1
	// pedestrian. 行人. 仅为输出类型 [SINCE v1.4.0].
	// [EN] pedestrian. Output type only [SINCE v1.4.0].
	ObjectType_OBJECT_PEDESTRIAN ObjectType = 2
	// automobile. 机动车. 仅为输出类型 [SINCE v1.4.0].
	// [EN] automobile. Output type only [SINCE v1.4.0].
	ObjectType_OBJECT_AUTOMOBILE ObjectType = 3
	// cyclist. 骑手. 仅为输出类型 [SINCE v1.4.0].
	// [EN] cyclist. Output type only [SINCE v1.4.0].
	ObjectType_OBJECT_CYCLIST ObjectType = 4
	// human_powered_vehicle. 非机动车. 仅为输出类型 [SINCE v1.4.0].
	// [EN] human_powered_vehicle. Non-motor vehicle. Output type only [SINCE v1.4.0].
	ObjectType_OBJECT_HUMAN_POWERED_VEHICLE ObjectType = 5
	// scenario. 场景识别. 仅为输出类型 [SINCE v2.0.0].
	// [EN] scenario. Scene recognition. Output type only [SINCE v2.0.0].
	ObjectType_OBJECT_SCENARIO ObjectType = 6
	// crowd. 人群识别. 输入和输出类型 [SINCE v2.0.0].
	// [EN] crowd. Crowd recognition. Both input and output types [SINCE v2.0.0].
	ObjectType_OBJECT_CROWD ObjectType = 7
	// algo. 算法仓. 输入和输出类型 [SINCE v2.3.0].
	// [EN] algo. Algo store object. Both input and output types [SINCE v2.3.0].
	ObjectType_OBJECT_ALGO ObjectType = 8
	// pedestrian+automobile+cyclist+human_powered_vehicle. 仅为输入类型 [SINCE v1.4.0].
	// [EN] pedestrian+automobile+cyclist+human_powered_vehicle. Input type only [SINCE v1.4.0].
	ObjectType_OBJECT_MULTI_PACH ObjectType = 100
	// city management scenario. 城管类场景. 仅为输入类型 [SINCE v2.0.0].
	// [EN] city management scenario. Input type only [SINCE v2.0.0].
	ObjectType_OBJECT_SCENARIO_CITY_MANAGEMENT ObjectType = 101
	// face+pedestrian. 人脸人体联合pipeline. 仅为输入类型 [SINCE v2.1.0].
	// [EN] face+pedestrian. Face and pedestrian association pipeline. Input type only [SINCE v2.1.0].
	ObjectType_OBJECT_FACE_PEDESTRIAN ObjectType = 102
	// city management scenario - automobile throw. 城管类场景-车辆抛撒. 仅作为输入类型 [EXPERIMENTAL].
	// [EN] city management scenario - automobile throw. autiombile throwing pipeline. Input type only [EXPERIMENTAL].
	ObjectType_OBJECT_SCENARIO_AUTOMOBILE_THROW ObjectType = 103
	// face+pedestrian+automobile+cyclist+human_powered_vehicle. 仅为输入类型 [SINCE v2.2.0].
	// [EN] face+pedestrian+automobile+cyclist+human_powered_vehicle. Input type only [SINCE v2.2.0].
	ObjectType_OBJECT_MULTI_FACE_PACH ObjectType = 104
	// traffic automobile count. 交通车辆计数. 仅为输入类型 [INTERNAL] [EXPERIMENTAL].
	// [EN] traffic automobile count. Input type only [INTERNAL] [EXPERIMENTAL].
	ObjectType_OBJECT_TRAFFIC_AUTOMOBILE_COUNT ObjectType = 105
	// pedestrian+automobile+cyclist+human_powered_vehicle. 仅为输入类型 [INTERNAL] [EXPERIMENTAL].
	// [EN] pedestrian+automobile+cyclist+human_powered_vehicle. Input type only [INTERNAL] [EXPERIMENTAL].
	ObjectType_OBJECT_TRAFFIC_MULTI_PACH ObjectType = 106
	//  city management - human action. 城管类应用-行人动作识别，仅作为输入类型 [SINCE v3.0.0].
	// [EN]  city management - human action. Input type only [SINCE v3.0.0].
	ObjectType_OBJECT_HUMAN_ACTION ObjectType = 107
)

var ObjectType_name = map[int32]string{
	0:   "OBJECT_UNKNOWN",
	1:   "OBJECT_FACE",
	2:   "OBJECT_PEDESTRIAN",
	3:   "OBJECT_AUTOMOBILE",
	4:   "OBJECT_CYCLIST",
	5:   "OBJECT_HUMAN_POWERED_VEHICLE",
	6:   "OBJECT_SCENARIO",
	7:   "OBJECT_CROWD",
	8:   "OBJECT_ALGO",
	100: "OBJECT_MULTI_PACH",
	101: "OBJECT_SCENARIO_CITY_MANAGEMENT",
	102: "OBJECT_FACE_PEDESTRIAN",
	103: "OBJECT_SCENARIO_AUTOMOBILE_THROW",
	104: "OBJECT_MULTI_FACE_PACH",
	105: "OBJECT_TRAFFIC_AUTOMOBILE_COUNT",
	106: "OBJECT_TRAFFIC_MULTI_PACH",
	107: "OBJECT_HUMAN_ACTION",
}
var ObjectType_value = map[string]int32{
	"OBJECT_UNKNOWN":                   0,
	"OBJECT_FACE":                      1,
	"OBJECT_PEDESTRIAN":                2,
	"OBJECT_AUTOMOBILE":                3,
	"OBJECT_CYCLIST":                   4,
	"OBJECT_HUMAN_POWERED_VEHICLE":     5,
	"OBJECT_SCENARIO":                  6,
	"OBJECT_CROWD":                     7,
	"OBJECT_ALGO":                      8,
	"OBJECT_MULTI_PACH":                100,
	"OBJECT_SCENARIO_CITY_MANAGEMENT":  101,
	"OBJECT_FACE_PEDESTRIAN":           102,
	"OBJECT_SCENARIO_AUTOMOBILE_THROW": 103,
	"OBJECT_MULTI_FACE_PACH":           104,
	"OBJECT_TRAFFIC_AUTOMOBILE_COUNT":  105,
	"OBJECT_TRAFFIC_MULTI_PACH":        106,
	"OBJECT_HUMAN_ACTION":              107,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{1}
}

// VIPER平台支持事件规则类型 [SINCE v2.0.0].
// [EN] VIPER event types. [SINCE v2.0.0].
type EventType int32

const (
	// unknown. 未知.
	// [EN] unknown.
	EventType_EVENT_UNKNOWN EventType = 0
	// pedestrian stay event. 逗留事件.
	// [EN] pedestrian stay event.
	EventType_EVENT_PEDESTRIAN_STAY EventType = 1
	// pedestrian hover event. 可疑人员徘徊事件.
	// [EN] pedestrian hover event.
	EventType_EVENT_PEDESTRIAN_HOVER EventType = 2
	// pedestrian cross line event. 越线事件.
	// [EN] pedestrian cross line event.
	EventType_EVENT_PEDESTRIAN_CROSS_LINE EventType = 3
	// pedestrian invade event. 区域入侵事件.
	// [EN] pedestrian invade event.
	EventType_EVENT_PEDESTRIAN_INVADE EventType = 4
	// vehicle park event. 违停事件.
	// [EN] vehicle park event.
	EventType_EVENT_VEHICLE_PARK EventType = 5
)

var EventType_name = map[int32]string{
	0: "EVENT_UNKNOWN",
	1: "EVENT_PEDESTRIAN_STAY",
	2: "EVENT_PEDESTRIAN_HOVER",
	3: "EVENT_PEDESTRIAN_CROSS_LINE",
	4: "EVENT_PEDESTRIAN_INVADE",
	5: "EVENT_VEHICLE_PARK",
}
var EventType_value = map[string]int32{
	"EVENT_UNKNOWN":               0,
	"EVENT_PEDESTRIAN_STAY":       1,
	"EVENT_PEDESTRIAN_HOVER":      2,
	"EVENT_PEDESTRIAN_CROSS_LINE": 3,
	"EVENT_PEDESTRIAN_INVADE":     4,
	"EVENT_VEHICLE_PARK":          5,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{2}
}

// 场景类型 [SINCE v2.0.0].
// [EN] Scenario type [SINCE v2.0.0].
type ScenarioType int32

const (
	// 下任务时, 不能使用这个参数.
	// [EN] This parameter cannot be used when issue tasks.
	ScenarioType_ST_UNKNOWN ScenarioType = 0
	// 违规占道经营.
	// [EN] Illegal roadside stall business.
	ScenarioType_ST_STALL ScenarioType = 1
	// 烟火.
	// [EN] Fireworks.
	ScenarioType_ST_FIRE ScenarioType = 2
	// 臧疆标语检测.
	// [EN] Tibetan and uygur slogans detection.
	ScenarioType_ST_SLOGAN ScenarioType = 3
	// 景观灯损坏.
	// [EN] Landscape lamp damaged.
	ScenarioType_ST_LANDSCAPE_LAMP ScenarioType = 4
	// 工地堆放不当.
	// [EN] Improper stacking at the construction site.
	ScenarioType_ST_CLUTTER ScenarioType = 5
	// 路面清洁（车辆抛洒）.
	// [EN] Road surface cleaning (the engineering automobile spraying).
	ScenarioType_ST_ROAD_CLEAN ScenarioType = 6
	// 工地泥土覆盖.
	// [EN] Construction site covered by soil.
	ScenarioType_ST_SOIL ScenarioType = 7
	// 打包垃圾检测 [EXPERIMENTAL].
	// [EN] Packed garbage detection [EXPERIMENTAL].
	ScenarioType_ST_GARBAGE ScenarioType = 8
	// 共享单车分类 [EXPERIMENTAL].
	// [EN] Shared bicycle classification [EXPERIMENTAL].
	ScenarioType_ST_SHARED_BICYCLE ScenarioType = 9
	// 共享单车乱序摆放 [EXPERIMENTAL].
	// [EN] Shared bicycle misorder [EXPERIMENTAL].
	ScenarioType_ST_SHARED_BICYCLE_MISORDER ScenarioType = 10
	// 在岗检测 [EXPERIMENTAL].
	// [EN] judge officer whether in site [EXPERIMENTAL].
	ScenarioType_ST_INDOOR ScenarioType = 11
	// 抽烟检测 [EXPERIMENTAL].
	// [EN] smoking classification.
	ScenarioType_ST_SMOKING ScenarioType = 12
)

var ScenarioType_name = map[int32]string{
	0:  "ST_UNKNOWN",
	1:  "ST_STALL",
	2:  "ST_FIRE",
	3:  "ST_SLOGAN",
	4:  "ST_LANDSCAPE_LAMP",
	5:  "ST_CLUTTER",
	6:  "ST_ROAD_CLEAN",
	7:  "ST_SOIL",
	8:  "ST_GARBAGE",
	9:  "ST_SHARED_BICYCLE",
	10: "ST_SHARED_BICYCLE_MISORDER",
	11: "ST_INDOOR",
	12: "ST_SMOKING",
}
var ScenarioType_value = map[string]int32{
	"ST_UNKNOWN":                 0,
	"ST_STALL":                   1,
	"ST_FIRE":                    2,
	"ST_SLOGAN":                  3,
	"ST_LANDSCAPE_LAMP":          4,
	"ST_CLUTTER":                 5,
	"ST_ROAD_CLEAN":              6,
	"ST_SOIL":                    7,
	"ST_GARBAGE":                 8,
	"ST_SHARED_BICYCLE":          9,
	"ST_SHARED_BICYCLE_MISORDER": 10,
	"ST_INDOOR":                  11,
	"ST_SMOKING":                 12,
}

func (x ScenarioType) String() string {
	return proto.EnumName(ScenarioType_name, int32(x))
}
func (ScenarioType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{3}
}

// 公共状态码.
// [EN] Common status code.
type StatusCode int32

const (
	// 成功.
	// [EN] succeed.
	StatusCode_OK StatusCode = 0
	// 未知系统错误.
	// [EN] Unknown system error.
	StatusCode_SYSTEM_UNKNOWN_ERROR StatusCode = 101
	// 网络错误.
	// [EN] Network error.
	StatusCode_SYSTEM_NETWORK_ERROR StatusCode = 102
	// 存储系统错误.
	// [EN] Storage system error.
	StatusCode_SYSTEM_STORAGE_ERROR StatusCode = 103
	// 授权错误.
	// [EN] License error.
	StatusCode_SYSTEM_LICENSE_ERROR StatusCode = 104
	// 指定数据库未找到.
	// [EN] The specified database was not found.
	StatusCode_DB_NOT_FOUND StatusCode = 201
	// 指定主键未找到.
	// [EN] The specified master key was not found.
	StatusCode_DB_KEY_NOT_FOUND StatusCode = 202
	// 指定数据库已存在.
	// [EN] The specified database already exists.
	StatusCode_DB_ALREADY_EXISTS StatusCode = 203
	// 指定主键已存在.
	// [EN] The specified master key already exists.
	StatusCode_DB_KEY_ALREADY_EXISTS StatusCode = 204
	// 人脸比对第一张图无人脸.
	// [EN] No face found in the first image through face recognition.
	StatusCode_FACE_NOT_FOUND_FIRST StatusCode = 301
	// 人脸比对第二张图无人脸.
	// [EN] No face found in the second image through face recognition.
	StatusCode_FACE_NOT_FOUND_SECOND StatusCode = 302
	// 图中无人脸.
	// [EN] No face found in the image.
	StatusCode_FACE_NOT_FOUND StatusCode = 303
	// 图像人脸质量太差.
	// [EN] The bad quality of face in the image.
	StatusCode_FACE_BAD_QUALITY StatusCode = 304
	// 未知或不支持的图片文件格式.
	// [EN] Unknown or unsupported image file format.
	StatusCode_IMAGE_UNKNOWN_FILE_FORMAT StatusCode = 401
	// 未知或不支持的图片颜色空间格式.
	// [EN] Unknown or unsupported image color space format.
	StatusCode_IMAGE_UNKNOWN_PIXEL_FORMAT StatusCode = 402
	// 图片尺寸过小.
	// [EN] The image size is too small.
	StatusCode_IMAGE_SIZE_TOO_SMALL StatusCode = 403
	// 图片尺寸过大.
	// [EN] The image size is too large.
	StatusCode_IMAGE_SIZE_TOO_LARGE StatusCode = 404
	// 指定物体未找到.
	// [EN] The specific object was not found.
	StatusCode_OBJECT_NOT_FOUND StatusCode = 501
	// 物体质量太差.
	// [EN] The object quality is too bad.
	StatusCode_OBJECT_BAD_QUALITY StatusCode = 502
)

var StatusCode_name = map[int32]string{
	0:   "OK",
	101: "SYSTEM_UNKNOWN_ERROR",
	102: "SYSTEM_NETWORK_ERROR",
	103: "SYSTEM_STORAGE_ERROR",
	104: "SYSTEM_LICENSE_ERROR",
	201: "DB_NOT_FOUND",
	202: "DB_KEY_NOT_FOUND",
	203: "DB_ALREADY_EXISTS",
	204: "DB_KEY_ALREADY_EXISTS",
	301: "FACE_NOT_FOUND_FIRST",
	302: "FACE_NOT_FOUND_SECOND",
	303: "FACE_NOT_FOUND",
	304: "FACE_BAD_QUALITY",
	401: "IMAGE_UNKNOWN_FILE_FORMAT",
	402: "IMAGE_UNKNOWN_PIXEL_FORMAT",
	403: "IMAGE_SIZE_TOO_SMALL",
	404: "IMAGE_SIZE_TOO_LARGE",
	501: "OBJECT_NOT_FOUND",
	502: "OBJECT_BAD_QUALITY",
}
var StatusCode_value = map[string]int32{
	"OK": 0,
	"SYSTEM_UNKNOWN_ERROR":       101,
	"SYSTEM_NETWORK_ERROR":       102,
	"SYSTEM_STORAGE_ERROR":       103,
	"SYSTEM_LICENSE_ERROR":       104,
	"DB_NOT_FOUND":               201,
	"DB_KEY_NOT_FOUND":           202,
	"DB_ALREADY_EXISTS":          203,
	"DB_KEY_ALREADY_EXISTS":      204,
	"FACE_NOT_FOUND_FIRST":       301,
	"FACE_NOT_FOUND_SECOND":      302,
	"FACE_NOT_FOUND":             303,
	"FACE_BAD_QUALITY":           304,
	"IMAGE_UNKNOWN_FILE_FORMAT":  401,
	"IMAGE_UNKNOWN_PIXEL_FORMAT": 402,
	"IMAGE_SIZE_TOO_SMALL":       403,
	"IMAGE_SIZE_TOO_LARGE":       404,
	"OBJECT_NOT_FOUND":           501,
	"OBJECT_BAD_QUALITY":         502,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{4}
}

// 二维图像坐标, 注意: 坐标系与输入图像相同.
// [EN] Coordinates of two-dimensional image. Note: the coordinate system is the same as the input image.
type Vertex struct {
	X                    int32    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int32    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vertex) Reset()         { *m = Vertex{} }
func (m *Vertex) String() string { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()    {}
func (*Vertex) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{0}
}
func (m *Vertex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vertex.Unmarshal(m, b)
}
func (m *Vertex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vertex.Marshal(b, m, deterministic)
}
func (dst *Vertex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vertex.Merge(dst, src)
}
func (m *Vertex) XXX_Size() int {
	return xxx_messageInfo_Vertex.Size(m)
}
func (m *Vertex) XXX_DiscardUnknown() {
	xxx_messageInfo_Vertex.DiscardUnknown(m)
}

var xxx_messageInfo_Vertex proto.InternalMessageInfo

func (m *Vertex) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vertex) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 二维图像坐标(可用于表示百分比以适应不同分辨率) [SINCE v2.0.0].
// [EN] Coordinates of two-dimensional image (can be used to represent
// percentages to accommodate different resolutions) [SINCE v2.0.0].
type Vertex2F struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vertex2F) Reset()         { *m = Vertex2F{} }
func (m *Vertex2F) String() string { return proto.CompactTextString(m) }
func (*Vertex2F) ProtoMessage()    {}
func (*Vertex2F) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{1}
}
func (m *Vertex2F) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vertex2F.Unmarshal(m, b)
}
func (m *Vertex2F) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vertex2F.Marshal(b, m, deterministic)
}
func (dst *Vertex2F) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vertex2F.Merge(dst, src)
}
func (m *Vertex2F) XXX_Size() int {
	return xxx_messageInfo_Vertex2F.Size(m)
}
func (m *Vertex2F) XXX_DiscardUnknown() {
	xxx_messageInfo_Vertex2F.DiscardUnknown(m)
}

var xxx_messageInfo_Vertex2F proto.InternalMessageInfo

func (m *Vertex2F) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vertex2F) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 二维图像大小.
// [EN] The size of two-dimensional image.
type Size struct {
	Width                int32    `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height               int32    `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Size) Reset()         { *m = Size{} }
func (m *Size) String() string { return proto.CompactTextString(m) }
func (*Size) ProtoMessage()    {}
func (*Size) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{2}
}
func (m *Size) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Size.Unmarshal(m, b)
}
func (m *Size) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Size.Marshal(b, m, deterministic)
}
func (dst *Size) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Size.Merge(dst, src)
}
func (m *Size) XXX_Size() int {
	return xxx_messageInfo_Size.Size(m)
}
func (m *Size) XXX_DiscardUnknown() {
	xxx_messageInfo_Size.DiscardUnknown(m)
}

var xxx_messageInfo_Size proto.InternalMessageInfo

func (m *Size) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Size) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

// 二维图像向量.
// 注意: 坐标系与输入图像相同.
// [EN] Vectors of tw-dimensional image. Note: the coordinate system is the same as the input image.
type Vector struct {
	X                    float32  `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    float32  `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{3}
}
func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (dst *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(dst, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

// 目标检测结果多边形边界.
// [EN] Bounding poly for target detection result.
type BoundingPoly struct {
	// 多边形顶点.
	// 注意: 目标区域为矩形时, 仅包含两个顶点, 第一个为左上角坐标, 第二个为右下角坐标.
	// [EN] Polygon vertices. Note that it only contains two vertices - the
	// first is the coordinate in upper left corner and the second is in the
	// lower right corner - when the target area is rectangular.
	Vertices             []*Vertex `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *BoundingPoly) Reset()         { *m = BoundingPoly{} }
func (m *BoundingPoly) String() string { return proto.CompactTextString(m) }
func (*BoundingPoly) ProtoMessage()    {}
func (*BoundingPoly) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{4}
}
func (m *BoundingPoly) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoundingPoly.Unmarshal(m, b)
}
func (m *BoundingPoly) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoundingPoly.Marshal(b, m, deterministic)
}
func (dst *BoundingPoly) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingPoly.Merge(dst, src)
}
func (m *BoundingPoly) XXX_Size() int {
	return xxx_messageInfo_BoundingPoly.Size(m)
}
func (m *BoundingPoly) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingPoly.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingPoly proto.InternalMessageInfo

func (m *BoundingPoly) GetVertices() []*Vertex {
	if m != nil {
		return m.Vertices
	}
	return nil
}

// 多边形, 可用于表示ROI [SINCE v2.0.0].
// [EN] Polygon, can be used to represent ROI [SINCE v2.0.0].
type BoundingPolyF struct {
	// 多边形顶点.
	// 注意: 坐标点为[0.0, 1.0]之间的任意浮点数, 表示相对宽或高的位置.
	// [EN] Polygon vertices. Note: The coordinate point can be any floating point
	// between [0.0, 1.0], indicating a relatively wide or high position.
	Vertices             []*Vertex2F `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *BoundingPolyF) Reset()         { *m = BoundingPolyF{} }
func (m *BoundingPolyF) String() string { return proto.CompactTextString(m) }
func (*BoundingPolyF) ProtoMessage()    {}
func (*BoundingPolyF) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{5}
}
func (m *BoundingPolyF) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoundingPolyF.Unmarshal(m, b)
}
func (m *BoundingPolyF) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoundingPolyF.Marshal(b, m, deterministic)
}
func (dst *BoundingPolyF) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoundingPolyF.Merge(dst, src)
}
func (m *BoundingPolyF) XXX_Size() int {
	return xxx_messageInfo_BoundingPolyF.Size(m)
}
func (m *BoundingPolyF) XXX_DiscardUnknown() {
	xxx_messageInfo_BoundingPolyF.DiscardUnknown(m)
}

var xxx_messageInfo_BoundingPolyF proto.InternalMessageInfo

func (m *BoundingPolyF) GetVertices() []*Vertex2F {
	if m != nil {
		return m.Vertices
	}
	return nil
}

// TimeRange表示一段时间区间 [start, end) , 时间戳为UTC时间.
// 时间戳JSON表示形式为RFC 3339格式, 如: "1972-01-01T10:00:20.021Z".
// [EN] TimeRange, represents a period of time interval [start, end), which the timestamp is UTC time.
// The representation of JSON timestamp is RFC3339 format, such as: “1972-01-01T10:00:20.021Z”.
type TimeRange struct {
	// 开始时间, 区间包含.
	// [EN] Start time, interval inclusive.
	Start *timestamp.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// 结束时间, 区间不包含.
	// [EN] End time, interval exclusive.
	End                  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeRange) Reset()         { *m = TimeRange{} }
func (m *TimeRange) String() string { return proto.CompactTextString(m) }
func (*TimeRange) ProtoMessage()    {}
func (*TimeRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{6}
}
func (m *TimeRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRange.Unmarshal(m, b)
}
func (m *TimeRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRange.Marshal(b, m, deterministic)
}
func (dst *TimeRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRange.Merge(dst, src)
}
func (m *TimeRange) XXX_Size() int {
	return xxx_messageInfo_TimeRange.Size(m)
}
func (m *TimeRange) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRange.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRange proto.InternalMessageInfo

func (m *TimeRange) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *TimeRange) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

type Angle struct {
	// 对象姿态变化角度, 单位是度.
	// [EN] Yawing angle, with the unit - degree.
	Yaw float32 `protobuf:"fixed32,1,opt,name=yaw,proto3" json:"yaw,omitempty"`
	// 对象俯仰变化角度, 单位是度.
	// [EN] Pitching angle, with the unit - degree.
	Pitch float32 `protobuf:"fixed32,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	// 对象平面旋转角度, 单位是度.
	// [EN] Rolling angle, with the unit - degree.
	Roll                 float32  `protobuf:"fixed32,3,opt,name=roll,proto3" json:"roll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Angle) Reset()         { *m = Angle{} }
func (m *Angle) String() string { return proto.CompactTextString(m) }
func (*Angle) ProtoMessage()    {}
func (*Angle) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{7}
}
func (m *Angle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Angle.Unmarshal(m, b)
}
func (m *Angle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Angle.Marshal(b, m, deterministic)
}
func (dst *Angle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Angle.Merge(dst, src)
}
func (m *Angle) XXX_Size() int {
	return xxx_messageInfo_Angle.Size(m)
}
func (m *Angle) XXX_DiscardUnknown() {
	xxx_messageInfo_Angle.DiscardUnknown(m)
}

var xxx_messageInfo_Angle proto.InternalMessageInfo

func (m *Angle) GetYaw() float32 {
	if m != nil {
		return m.Yaw
	}
	return 0
}

func (m *Angle) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *Angle) GetRoll() float32 {
	if m != nil {
		return m.Roll
	}
	return 0
}

// 设备物理朝向坐标系 [SINCE v2.1.0].
// 使用右手坐标系, 在设备坐标系中.
// Z轴为镜头光轴, 即镜头朝向方向为正方向;
// Y轴正方向为摄像机底部到摄像机顶部;
// X轴正方向为Y与Z叉积方向.
// [EN] Equipment physical orientation coordination [SINCE v2.1.0].
// Using right-handed cartesian coordinates in the equipment coordinate.
// Z axis is lens optical axis, that is, lens orientation direction is positive direction;
// the positive direction of the Y axis is from the bottom of the camera to the top of the camera;
// the positive direction of X axis is the cross-product direction of Y and Z.
type Orientation struct {
	// 围绕-Z轴的旋转方向, 单位为Degree.
	// [EN] The direction of azimuth around the –Z-axis with the unit - Degree.
	Azimuth float32 `protobuf:"fixed32,1,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	// 围绕X轴的旋转方向, 单位为Degree.
	// [EN] The direction of pitching around the –X-axis with the unit - Degree.
	Pitch float32 `protobuf:"fixed32,2,opt,name=pitch,proto3" json:"pitch,omitempty"`
	// 围绕Y轴的旋转方向, 单位为Degree.
	// [EN] The direction of rolling around the –Y-axis with the unit - Degree.
	Roll                 float32  `protobuf:"fixed32,3,opt,name=roll,proto3" json:"roll,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Orientation) Reset()         { *m = Orientation{} }
func (m *Orientation) String() string { return proto.CompactTextString(m) }
func (*Orientation) ProtoMessage()    {}
func (*Orientation) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{8}
}
func (m *Orientation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Orientation.Unmarshal(m, b)
}
func (m *Orientation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Orientation.Marshal(b, m, deterministic)
}
func (dst *Orientation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Orientation.Merge(dst, src)
}
func (m *Orientation) XXX_Size() int {
	return xxx_messageInfo_Orientation.Size(m)
}
func (m *Orientation) XXX_DiscardUnknown() {
	xxx_messageInfo_Orientation.DiscardUnknown(m)
}

var xxx_messageInfo_Orientation proto.InternalMessageInfo

func (m *Orientation) GetAzimuth() float32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Orientation) GetPitch() float32 {
	if m != nil {
		return m.Pitch
	}
	return 0
}

func (m *Orientation) GetRoll() float32 {
	if m != nil {
		return m.Roll
	}
	return 0
}

type Image struct {
	// 可选, 图片格式, 一般情况下不需要填写, 系统自动解析.
	// [EN] Optional, image format, generally no need to fill in, will be automatically detected by the system.
	Format ImageFormat `protobuf:"varint,1,opt,name=format,proto3,enum=sensetime.viper.commonapis.ImageFormat" json:"format,omitempty"`
	// 可选, 原始图片数据, 使用JSON编码是传入图片内容的Base64编码字符串.
	// [EN] Optional, the original image data, encoded by JSON, is the Base64 encoded string for the content of input images.
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// 可选, 图片网络位置, 部分服务不支持url形式传入, 请查看对应服务接口文档.
	// [EN] Optional, network location of the image. Some services do not support url field, and please view the API documentation for reference of relating services.
	Url                  string   `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Image) Reset()         { *m = Image{} }
func (m *Image) String() string { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()    {}
func (*Image) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{9}
}
func (m *Image) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Image.Unmarshal(m, b)
}
func (m *Image) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Image.Marshal(b, m, deterministic)
}
func (dst *Image) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Image.Merge(dst, src)
}
func (m *Image) XXX_Size() int {
	return xxx_messageInfo_Image.Size(m)
}
func (m *Image) XXX_DiscardUnknown() {
	xxx_messageInfo_Image.DiscardUnknown(m)
}

var xxx_messageInfo_Image proto.InternalMessageInfo

func (m *Image) GetFormat() ImageFormat {
	if m != nil {
		return m.Format
	}
	return ImageFormat_IMAGE_UNKNOWN
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// SenseTime通用特征格式.
// [EN] SenseTime common feature format.
type ObjectFeature struct {
	// 特征对象类型, 为对应ObjectType的字符串表示.
	// [EN] The feature object type is a string representation of the corresponding Object Type.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// 特征模型版本, 对应SDK模型版本号, 如: 24001.
	// [EN] Feature model version, corresponding to SDK model version number, e.g: 24001.
	Version int32 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	// 特征数据, 完整标准特征序列化格式, 范围: JSON表示为Base64编码字符串.
	// [EN] Feature data in standard feature serialization format, range: JSON is represented as a Base64 encoded string.
	Blob                 []byte   `protobuf:"bytes,3,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectFeature) Reset()         { *m = ObjectFeature{} }
func (m *ObjectFeature) String() string { return proto.CompactTextString(m) }
func (*ObjectFeature) ProtoMessage()    {}
func (*ObjectFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{10}
}
func (m *ObjectFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectFeature.Unmarshal(m, b)
}
func (m *ObjectFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectFeature.Marshal(b, m, deterministic)
}
func (dst *ObjectFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectFeature.Merge(dst, src)
}
func (m *ObjectFeature) XXX_Size() int {
	return xxx_messageInfo_ObjectFeature.Size(m)
}
func (m *ObjectFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectFeature.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectFeature proto.InternalMessageInfo

func (m *ObjectFeature) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ObjectFeature) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *ObjectFeature) GetBlob() []byte {
	if m != nil {
		return m.Blob
	}
	return nil
}

type PortraitImageLocation struct {
	// 全景大图大小.
	// [EN] Panoramic image size.
	PanoramicImageSize *Size `protobuf:"bytes,1,opt,name=panoramic_image_size,json=panoramicImageSize,proto3" json:"panoramic_image_size,omitempty"`
	// 抓拍小图相对全景大图的位置.
	// [EN] The relative position of captured images to the panoramic images.
	PortraitImageInPanoramic *BoundingPoly `protobuf:"bytes,2,opt,name=portrait_image_in_panoramic,json=portraitImageInPanoramic,proto3" json:"portrait_image_in_panoramic,omitempty"`
	// 可选, 抓拍对象相对于大图的位置.
	// 当本字段非空时, 应使用本字段获取抓拍对象在大图中的位置, 并且此时
	// portrait_image_in_panoramic可能为空, 且小图可能不属于大图的子区域 [SINCE v1.3.0].
	// [EN] Optional, relative position of captured objects to the large images.
	// When this field is not null, use this field to obtain the position of the object captured in the large image.
	// The portrait_image_in_panoramic may be null, and the small image may not belongs to the sub-region of the large image at this time [SINCE v1.3.0].
	PortraitInPanoramic  *BoundingPoly `protobuf:"bytes,3,opt,name=portrait_in_panoramic,json=portraitInPanoramic,proto3" json:"portrait_in_panoramic,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PortraitImageLocation) Reset()         { *m = PortraitImageLocation{} }
func (m *PortraitImageLocation) String() string { return proto.CompactTextString(m) }
func (*PortraitImageLocation) ProtoMessage()    {}
func (*PortraitImageLocation) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{11}
}
func (m *PortraitImageLocation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PortraitImageLocation.Unmarshal(m, b)
}
func (m *PortraitImageLocation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PortraitImageLocation.Marshal(b, m, deterministic)
}
func (dst *PortraitImageLocation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PortraitImageLocation.Merge(dst, src)
}
func (m *PortraitImageLocation) XXX_Size() int {
	return xxx_messageInfo_PortraitImageLocation.Size(m)
}
func (m *PortraitImageLocation) XXX_DiscardUnknown() {
	xxx_messageInfo_PortraitImageLocation.DiscardUnknown(m)
}

var xxx_messageInfo_PortraitImageLocation proto.InternalMessageInfo

func (m *PortraitImageLocation) GetPanoramicImageSize() *Size {
	if m != nil {
		return m.PanoramicImageSize
	}
	return nil
}

func (m *PortraitImageLocation) GetPortraitImageInPanoramic() *BoundingPoly {
	if m != nil {
		return m.PortraitImageInPanoramic
	}
	return nil
}

func (m *PortraitImageLocation) GetPortraitInPanoramic() *BoundingPoly {
	if m != nil {
		return m.PortraitInPanoramic
	}
	return nil
}

// 通用抓拍目标信息结构, 第三方设备接入后均归一化到此结构体.
// [EN] General capture target is normalized to this structure after ingress of third-party equipment.
type TargetAnnotation struct {
	// 可选, 目标检测质量, 范围: [0.0, 1.0].
	// [EN] Optional, target detection quality, range: [0.0, 1.0].
	Quality float32 `protobuf:"fixed32,1,opt,name=quality,proto3" json:"quality,omitempty"`
	// 对象边界相对于小图的坐标.
	// [EN] The object boundary relatives to the coordinate of small images.
	Rectangle *BoundingPoly `protobuf:"bytes,2,opt,name=rectangle,proto3" json:"rectangle,omitempty"`
	// 可选, 对象跟踪id, 范围: [0, inf).
	// [EN] Optional, object tracking id, range [0,inf).
	TrackId int64 `protobuf:"varint,3,opt,name=track_id,json=trackId,proto3" json:"track_id,omitempty"`
	// 对象俯仰角.
	// [EN] Object pitch angle.
	Angle *Angle `protobuf:"bytes,4,opt,name=angle,proto3" json:"angle,omitempty"`
	// 对象类型, 见ObjectType到字符串的标准映射, 如: OBJECT_FACE, OBJECT_PEDESTRIAN.
	// [EN] Object type, see the standard mapping from ObjectType to string, e.g.: OBJECT_FACE, OBJECT_PEDESTRIAN.
	Type string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	// 对象关键点坐标.
	// [EN] Object key points coordination.
	Landmarks []*Vertex `protobuf:"bytes,6,rep,name=landmarks,proto3" json:"landmarks,omitempty"`
	// 对象可选属性.
	// [EN] Object optional attributes.
	Attributes map[string]string `protobuf:"bytes,7,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 抓拍图相对于大图的坐标信息.
	// [EN] The captured image corresponding to the coordinate information of large images.
	PortraitImageLocation *PortraitImageLocation `protobuf:"bytes,8,opt,name=portrait_image_location,json=portraitImageLocation,proto3" json:"portrait_image_location,omitempty"`
	// 抓拍对象全局唯一标识 [SINCE v1.3.0].
	// [EN] Globally unique identification of the object captured [SINCE v1.3.0].
	ObjectId             string   `protobuf:"bytes,9,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TargetAnnotation) Reset()         { *m = TargetAnnotation{} }
func (m *TargetAnnotation) String() string { return proto.CompactTextString(m) }
func (*TargetAnnotation) ProtoMessage()    {}
func (*TargetAnnotation) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{12}
}
func (m *TargetAnnotation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetAnnotation.Unmarshal(m, b)
}
func (m *TargetAnnotation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetAnnotation.Marshal(b, m, deterministic)
}
func (dst *TargetAnnotation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetAnnotation.Merge(dst, src)
}
func (m *TargetAnnotation) XXX_Size() int {
	return xxx_messageInfo_TargetAnnotation.Size(m)
}
func (m *TargetAnnotation) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetAnnotation.DiscardUnknown(m)
}

var xxx_messageInfo_TargetAnnotation proto.InternalMessageInfo

func (m *TargetAnnotation) GetQuality() float32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *TargetAnnotation) GetRectangle() *BoundingPoly {
	if m != nil {
		return m.Rectangle
	}
	return nil
}

func (m *TargetAnnotation) GetTrackId() int64 {
	if m != nil {
		return m.TrackId
	}
	return 0
}

func (m *TargetAnnotation) GetAngle() *Angle {
	if m != nil {
		return m.Angle
	}
	return nil
}

func (m *TargetAnnotation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *TargetAnnotation) GetLandmarks() []*Vertex {
	if m != nil {
		return m.Landmarks
	}
	return nil
}

func (m *TargetAnnotation) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *TargetAnnotation) GetPortraitImageLocation() *PortraitImageLocation {
	if m != nil {
		return m.PortraitImageLocation
	}
	return nil
}

func (m *TargetAnnotation) GetObjectId() string {
	if m != nil {
		return m.ObjectId
	}
	return ""
}

// VIPER平台事件任务规则 [SINCE v2.0.0].
// [EN] VIPER event rule [SINCE v2.0.0].
type EventRule struct {
	// 事件类型.
	// [EN] Event type.
	Type EventType `protobuf:"varint,1,opt,name=type,proto3,enum=sensetime.viper.commonapis.EventType" json:"type,omitempty"`
	// 可选, 规则ID (注: 如下发任务时未指定则自动生成).
	// [EN] Optional, rule ID (note: automatically generated if unspecified when creating tasks).
	RuleId string `protobuf:"bytes,2,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	// 可选, ROI区域.
	// - 对于使用多边形作为区域的事件, 一般传入至少4个点, 顺时针方向, 不要求闭合, 不填或置空表示全画面;
	// - 对于跨线事件, 必须传入两个点表示参考线, 建议参考线尽量穿过画面中部区域, 以达到更好的检测效果;
	// - 各点的坐标为画面下的百分比坐标(如顶点<x=0.1, y=0.1>可以表示1920x1080分标率画面下<x=192,y=108>的点), 前后端根据实际分辨率进行换算.
	// [EN] Optional, ROI zone.
	// - For events using polygons as zones, 4 points at least are generally passed in clockwise direction, representing the whole image with no required closing, no filling or blank;
	// - For cross-line events, 2 points must be introduced to represent the reference line. It is suggested that the reference line should pass through the middle area of the image as far as possible to achieve a better detection effect;
	// - The coordinate of each point is a percentage under the image (for example, vertices <x=0.1, y=0.1> can represent points <x=192, y=108> under the resolution of 1920 x 1080), and the front and back ends can be converted according to the actual resolution.
	Roi *BoundingPolyF `protobuf:"bytes,3,opt,name=roi,proto3" json:"roi,omitempty"`
	// 可选, 时长, 事件的时长告警阈值. json中是字符串类型, 例如填写5s表示5秒.
	// - 此参数用于逗留事件、徘徊事件及违停事件, 其和Worker配置文件中的min_duration共同起作用，只有同时大于这两者时，才会上报告警事件, 如果不配或置空，则只使用min_duration配置. 其他事件不需要此参数, 不填或置空即可.
	// [EN] Optional, duration, event time interval threshold. json is a string type. For example, filling 5s means 5 seconds.
	// - It is used for pedestrian stay, pedestrian hover and vehicle park events, and works together with min_duration parameter in worker config file, only exceed these two parameters at same time, the worker will report corresponding event, min_duration alone in worker config is used if this paramter is not filled or blank. Other events do not need it, leave it bland or not filled.
	Duration *duration.Duration `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`
	// 可选, 方向. 用于跨线事件. 此为非范化向量坐标(图像坐标系), 例如(-1,0)表示左, (1,0)表示右, (0,-1)表示上, (0,1)表示下, (1,1)表示右下, (0,0)表示不限定方向. 不填或置空表示业务不要求方向.
	// [EN] Optional, direction. Used for cross-line events. This is a non-normalized vectorial coordinate (image coordinate system). For example (-1,0) means left, (1,0) means right, (0,-1) means upward side, (0,1) means lower side, (1,1) means lower right, (0,0) means unlimited direction. Blank indicates the task has no direction limitation.
	Direction            *Vector  `protobuf:"bytes,5,opt,name=direction,proto3" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventRule) Reset()         { *m = EventRule{} }
func (m *EventRule) String() string { return proto.CompactTextString(m) }
func (*EventRule) ProtoMessage()    {}
func (*EventRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{13}
}
func (m *EventRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRule.Unmarshal(m, b)
}
func (m *EventRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRule.Marshal(b, m, deterministic)
}
func (dst *EventRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRule.Merge(dst, src)
}
func (m *EventRule) XXX_Size() int {
	return xxx_messageInfo_EventRule.Size(m)
}
func (m *EventRule) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRule.DiscardUnknown(m)
}

var xxx_messageInfo_EventRule proto.InternalMessageInfo

func (m *EventRule) GetType() EventType {
	if m != nil {
		return m.Type
	}
	return EventType_EVENT_UNKNOWN
}

func (m *EventRule) GetRuleId() string {
	if m != nil {
		return m.RuleId
	}
	return ""
}

func (m *EventRule) GetRoi() *BoundingPolyF {
	if m != nil {
		return m.Roi
	}
	return nil
}

func (m *EventRule) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *EventRule) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

// 系统摄像头唯一标识, 一般由业务系统统一分配和管理.
// [EN] The unique id of the system camera, is generally distributed and managed by the service system.
type CameraIdentifier struct {
	// 摄像头所属区域id, 0号id系统保留, 范围: [1, 16383].
	// [EN] Region id of the camera, in which id '0' is reserved by the system, range: [1, 16383].
	RegionId int32 `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	// 摄像头在区域region_id内的下标, 0号id系统保留, 范围: [1, 127].
	// [EN] Camera index in region specified by region_id, in which id '0' is reserved by the system, range: [1, 127].
	CameraIdx            int32    `protobuf:"varint,2,opt,name=camera_idx,json=cameraIdx,proto3" json:"camera_idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CameraIdentifier) Reset()         { *m = CameraIdentifier{} }
func (m *CameraIdentifier) String() string { return proto.CompactTextString(m) }
func (*CameraIdentifier) ProtoMessage()    {}
func (*CameraIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{14}
}
func (m *CameraIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraIdentifier.Unmarshal(m, b)
}
func (m *CameraIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraIdentifier.Marshal(b, m, deterministic)
}
func (dst *CameraIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraIdentifier.Merge(dst, src)
}
func (m *CameraIdentifier) XXX_Size() int {
	return xxx_messageInfo_CameraIdentifier.Size(m)
}
func (m *CameraIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_CameraIdentifier proto.InternalMessageInfo

func (m *CameraIdentifier) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *CameraIdentifier) GetCameraIdx() int32 {
	if m != nil {
		return m.CameraIdx
	}
	return 0
}

// 通用翻页结构.
// [EN] Common paging structure.
type Paging struct {
	// 可选, 开始位置, 取值:>=0, 0为第一条, 默认值为0. 作为输出时,
	// 返回本次请求返回的第一条记录实际位置(一般与输入一致).
	// [EN] Optional, start position, value: > = 0, 0 is the first line; the default value is 0.
	// In response, actual offset of the first returned record is returned
	// (generally equals to the offset in request).
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 长度, 默认取值范围[1,100], 如果超出范围, 则返回失败; 在某些接口中limit范围可能会重新定义, 请以其接口的补充说明为准.
	// [EN] Length, default value range [1,100], if it is out of the range, error will be returned; as the limit range may be redefined in some APIs, please refer to the supplementary description of these APIs.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 可选, 请求无须填此参数, 响应时系统填写.
	// [EN] Optional, this parameter is not required for request, but will be
	// filled in response.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paging) Reset()         { *m = Paging{} }
func (m *Paging) String() string { return proto.CompactTextString(m) }
func (*Paging) ProtoMessage()    {}
func (*Paging) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{15}
}
func (m *Paging) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paging.Unmarshal(m, b)
}
func (m *Paging) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paging.Marshal(b, m, deterministic)
}
func (dst *Paging) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paging.Merge(dst, src)
}
func (m *Paging) XXX_Size() int {
	return xxx_messageInfo_Paging.Size(m)
}
func (m *Paging) XXX_DiscardUnknown() {
	xxx_messageInfo_Paging.DiscardUnknown(m)
}

var xxx_messageInfo_Paging proto.InternalMessageInfo

func (m *Paging) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Paging) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *Paging) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 摄像机通用信息.
// [EN] Camera information.
type CameraInfo struct {
	// 可选, 摄像机ID. 摄像机的UUID, 对应相机管理服务的camera_uuid.
	// [EN] Optional, camera ID. UUID of camera is corresponding to camera_uuid in camera management.
	CameraId string `protobuf:"bytes,1,opt,name=camera_id,json=cameraId,proto3" json:"camera_id,omitempty"`
	// 可选, 摄像机硬件id.
	// - GB28181平台相机时为相机国标ID;
	// - GAT1400平台相机时为相机DeviceID(APE_ID);
	// - 其他平台接入时为对应平台下相机的ID;
	// - 直连相机时为相机host信息, 格式:"ip:port".
	// [EN] Optional, camera hardware id.
	// – Camera GB Standard ID in GB28181 camera;
	// - DeviceID (APE_ID) in GAT1400 platform camera;
	// - the ID of the camera on the corresponding platform when other platforms are ingressed;
	// - host information when directly connecting cameras, format: "ip:port".
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 可选, 内部自动生成, 为commonapis.ingress.SourceType对应字符串.
	// [EN] Optional, it is generated automatically as a string corresponding to commonapis.ingress.SourceType.
	DeviceType string `protobuf:"bytes,3,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// 可选, 摄像头所在区域代码 [DEPRECATED].
	// [EN] Optional, zone code of the camera [DEPRECATED].
	PlaceCode string `protobuf:"bytes,4,opt,name=place_code,json=placeCode,proto3" json:"place_code,omitempty"`
	// 可选, 摄像头所在区域名 [DEPRECATED].
	// [EN] Optional, zone code of the camera [DEPRECATED].
	PlaceName string `protobuf:"bytes,5,opt,name=place_name,json=placeName,proto3" json:"place_name,omitempty"`
	// 可选, 摄像头所在卡口代码 [DEPRECATED].
	// [EN] Optional, tollgate code of the camera [DEPRECATED].
	TollgateId string `protobuf:"bytes,6,opt,name=tollgate_id,json=tollgateId,proto3" json:"tollgate_id,omitempty"`
	// 可选, 摄像头所在卡口名 [DEPRECATED].
	// [EN] Optional, tollgate name of the camera [DEPRECATED].
	TollgateName string `protobuf:"bytes,7,opt,name=tollgate_name,json=tollgateName,proto3" json:"tollgate_name,omitempty"`
	// 可选, 内部自动生成, 用于表示GAT1400的SourceID.
	// - 第三方视图库推图给VIPER IIS时携带, 然后由IIS填入;
	// - GB28281视频流提取的图片经IIS推送给第三方视图库时由IIS生成.
	// [EN] Optional, generated automatically and used to represent the SourceID of GAT1400.
	// - Carried by the third party when pushing image database to VIPER IIS which will then fill it in;
	// - images extracted from GB28281 video stream are generated by IIS when they are pushed to a third party image database by IIS.
	SourceId string `protobuf:"bytes,8,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// 摄像头内部唯一标识.
	// [EN] Unique identification of internal camera.
	InternalId *CameraIdentifier `protobuf:"bytes,9,opt,name=internal_id,json=internalId,proto3" json:"internal_id,omitempty"`
	// 可选, Zone的UUID, 对应相机管理服务的zone_uuid [SINCE v2.0.0].
	// [EN] Optional, UUID of Zone is corresponding to zone_uuid in camera management. [SINCEv2.0.0].
	ZoneId               string   `protobuf:"bytes,10,opt,name=zone_id,json=zoneId,proto3" json:"zone_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CameraInfo) Reset()         { *m = CameraInfo{} }
func (m *CameraInfo) String() string { return proto.CompactTextString(m) }
func (*CameraInfo) ProtoMessage()    {}
func (*CameraInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{16}
}
func (m *CameraInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraInfo.Unmarshal(m, b)
}
func (m *CameraInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraInfo.Marshal(b, m, deterministic)
}
func (dst *CameraInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraInfo.Merge(dst, src)
}
func (m *CameraInfo) XXX_Size() int {
	return xxx_messageInfo_CameraInfo.Size(m)
}
func (m *CameraInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CameraInfo proto.InternalMessageInfo

func (m *CameraInfo) GetCameraId() string {
	if m != nil {
		return m.CameraId
	}
	return ""
}

func (m *CameraInfo) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *CameraInfo) GetDeviceType() string {
	if m != nil {
		return m.DeviceType
	}
	return ""
}

func (m *CameraInfo) GetPlaceCode() string {
	if m != nil {
		return m.PlaceCode
	}
	return ""
}

func (m *CameraInfo) GetPlaceName() string {
	if m != nil {
		return m.PlaceName
	}
	return ""
}

func (m *CameraInfo) GetTollgateId() string {
	if m != nil {
		return m.TollgateId
	}
	return ""
}

func (m *CameraInfo) GetTollgateName() string {
	if m != nil {
		return m.TollgateName
	}
	return ""
}

func (m *CameraInfo) GetSourceId() string {
	if m != nil {
		return m.SourceId
	}
	return ""
}

func (m *CameraInfo) GetInternalId() *CameraIdentifier {
	if m != nil {
		return m.InternalId
	}
	return nil
}

func (m *CameraInfo) GetZoneId() string {
	if m != nil {
		return m.ZoneId
	}
	return ""
}

// 通用处理结果返回. 通常在Batch类请求中返回每个子请求的错误状态.
// [EN] General processing results returned. Error status of each sub-request is usually returned in Batch mode requests.
type Result struct {
	// 通用服务、系统错误码, 对应HTTP错误及语义见系统标准错误表.
	// 若为业务特定错误, code应返回0, 详情见status及对应错误.
	// [EN] For common service and system error codes, see the system standard error table corresponding HTTP errors and semantics.
	// For business-specific errors, code will return 0. For details, see status and corresponding errors.
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 错误详细描述.
	// [EN] Detailed description of the error.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// 业务错误码.
	// [EN] Business error code.
	Status               StatusCode `protobuf:"varint,3,opt,name=status,proto3,enum=sensetime.viper.commonapis.StatusCode" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{17}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (dst *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(dst, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Result) GetStatus() StatusCode {
	if m != nil {
		return m.Status
	}
	return StatusCode_OK
}

type GeoPoint struct {
	// 纬度, 单位是度. 取值范围 [-90.0, +90.0].
	// [EN] The latitude in degrees. It must be in the range [-90.0, +90.0].
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// 经度, 单位是度. 取值范围 [-180.0, +180.0].
	// [EN] The longitude in degrees. It must be in the range [-180.0, +180.0].
	Longitude            float64  `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GeoPoint) Reset()         { *m = GeoPoint{} }
func (m *GeoPoint) String() string { return proto.CompactTextString(m) }
func (*GeoPoint) ProtoMessage()    {}
func (*GeoPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{18}
}
func (m *GeoPoint) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoPoint.Unmarshal(m, b)
}
func (m *GeoPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoPoint.Marshal(b, m, deterministic)
}
func (dst *GeoPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPoint.Merge(dst, src)
}
func (m *GeoPoint) XXX_Size() int {
	return xxx_messageInfo_GeoPoint.Size(m)
}
func (m *GeoPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPoint.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPoint proto.InternalMessageInfo

func (m *GeoPoint) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GeoPoint) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

// 地理位置多边形区域 [SINCE v2.0.0].
// [EN] Geographical polygon area [SINCE v2.0.0].
type GeoPolygon struct {
	// 地理位置的多边形区域顶点, 第一个和最后一个顶点必须相同,  因此顶点数必须大于等于4个.
	// [EN] The first and last vertices of the polygon area in the geographic location must be the same, so the vertices count must be 4 or more than 4.
	Vertices             []*GeoPoint `protobuf:"bytes,1,rep,name=vertices,proto3" json:"vertices,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GeoPolygon) Reset()         { *m = GeoPolygon{} }
func (m *GeoPolygon) String() string { return proto.CompactTextString(m) }
func (*GeoPolygon) ProtoMessage()    {}
func (*GeoPolygon) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{19}
}
func (m *GeoPolygon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeoPolygon.Unmarshal(m, b)
}
func (m *GeoPolygon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeoPolygon.Marshal(b, m, deterministic)
}
func (dst *GeoPolygon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeoPolygon.Merge(dst, src)
}
func (m *GeoPolygon) XXX_Size() int {
	return xxx_messageInfo_GeoPolygon.Size(m)
}
func (m *GeoPolygon) XXX_DiscardUnknown() {
	xxx_messageInfo_GeoPolygon.DiscardUnknown(m)
}

var xxx_messageInfo_GeoPolygon proto.InternalMessageInfo

func (m *GeoPolygon) GetVertices() []*GeoPoint {
	if m != nil {
		return m.Vertices
	}
	return nil
}

// 动态JSONPB Schema支持, 对应的JSON表示形式为:
// `{"@jsonpb_type": "sensetime.com/viper.algo.xx", "key1": "value1"}` [SINCE v2.3.0].
// [EN] Dynamic JSONPB Schema support, JSON representation for this type is:
// `{"@jsonpb_type": "sensetime.com/viper.algo.xx", "key1": "value1"}` [SINCE v2.3.0].
type JSONPBAny struct {
	TypeUrl              string   `protobuf:"bytes,1,opt,name=type_url,json=typeUrl,proto3" json:"type_url,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JSONPBAny) Reset()         { *m = JSONPBAny{} }
func (m *JSONPBAny) String() string { return proto.CompactTextString(m) }
func (*JSONPBAny) ProtoMessage()    {}
func (*JSONPBAny) Descriptor() ([]byte, []int) {
	return fileDescriptor_commonapis_468c6a208aad6159, []int{20}
}
func (m *JSONPBAny) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JSONPBAny.Unmarshal(m, b)
}
func (m *JSONPBAny) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JSONPBAny.Marshal(b, m, deterministic)
}
func (dst *JSONPBAny) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONPBAny.Merge(dst, src)
}
func (m *JSONPBAny) XXX_Size() int {
	return xxx_messageInfo_JSONPBAny.Size(m)
}
func (m *JSONPBAny) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONPBAny.DiscardUnknown(m)
}

var xxx_messageInfo_JSONPBAny proto.InternalMessageInfo

func (m *JSONPBAny) GetTypeUrl() string {
	if m != nil {
		return m.TypeUrl
	}
	return ""
}

func (m *JSONPBAny) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Vertex)(nil), "sensetime.viper.commonapis.Vertex")
	proto.RegisterType((*Vertex2F)(nil), "sensetime.viper.commonapis.Vertex2F")
	proto.RegisterType((*Size)(nil), "sensetime.viper.commonapis.Size")
	proto.RegisterType((*Vector)(nil), "sensetime.viper.commonapis.Vector")
	proto.RegisterType((*BoundingPoly)(nil), "sensetime.viper.commonapis.BoundingPoly")
	proto.RegisterType((*BoundingPolyF)(nil), "sensetime.viper.commonapis.BoundingPolyF")
	proto.RegisterType((*TimeRange)(nil), "sensetime.viper.commonapis.TimeRange")
	proto.RegisterType((*Angle)(nil), "sensetime.viper.commonapis.Angle")
	proto.RegisterType((*Orientation)(nil), "sensetime.viper.commonapis.Orientation")
	proto.RegisterType((*Image)(nil), "sensetime.viper.commonapis.Image")
	proto.RegisterType((*ObjectFeature)(nil), "sensetime.viper.commonapis.ObjectFeature")
	proto.RegisterType((*PortraitImageLocation)(nil), "sensetime.viper.commonapis.PortraitImageLocation")
	proto.RegisterType((*TargetAnnotation)(nil), "sensetime.viper.commonapis.TargetAnnotation")
	proto.RegisterMapType((map[string]string)(nil), "sensetime.viper.commonapis.TargetAnnotation.AttributesEntry")
	proto.RegisterType((*EventRule)(nil), "sensetime.viper.commonapis.EventRule")
	proto.RegisterType((*CameraIdentifier)(nil), "sensetime.viper.commonapis.CameraIdentifier")
	proto.RegisterType((*Paging)(nil), "sensetime.viper.commonapis.Paging")
	proto.RegisterType((*CameraInfo)(nil), "sensetime.viper.commonapis.CameraInfo")
	proto.RegisterType((*Result)(nil), "sensetime.viper.commonapis.Result")
	proto.RegisterType((*GeoPoint)(nil), "sensetime.viper.commonapis.GeoPoint")
	proto.RegisterType((*GeoPolygon)(nil), "sensetime.viper.commonapis.GeoPolygon")
	proto.RegisterType((*JSONPBAny)(nil), "sensetime.viper.commonapis.JSONPBAny")
	proto.RegisterEnum("sensetime.viper.commonapis.ImageFormat", ImageFormat_name, ImageFormat_value)
	proto.RegisterEnum("sensetime.viper.commonapis.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("sensetime.viper.commonapis.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("sensetime.viper.commonapis.ScenarioType", ScenarioType_name, ScenarioType_value)
	proto.RegisterEnum("sensetime.viper.commonapis.StatusCode", StatusCode_name, StatusCode_value)
}

func init() {
	proto.RegisterFile("gitlab.sz.sensetime.com/viper/commonapis/pb/commonapis.proto", fileDescriptor_commonapis_468c6a208aad6159)
}

var fileDescriptor_commonapis_468c6a208aad6159 = []byte{
	// 2025 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0xdb, 0x72, 0xdb, 0xc6,
	0x19, 0x0e, 0x8f, 0x22, 0x7f, 0xc9, 0xf2, 0x7a, 0x6d, 0xd9, 0x92, 0x9c, 0xd8, 0x2e, 0xeb, 0xa6,
	0xae, 0xc7, 0x43, 0xb7, 0x6a, 0x3b, 0x3d, 0xb9, 0x69, 0x40, 0x12, 0xa4, 0x60, 0x81, 0x00, 0xbd,
	0x80, 0xec, 0x28, 0x93, 0x19, 0x0c, 0x44, 0xac, 0x28, 0xc4, 0x20, 0xc0, 0x82, 0x4b, 0xc5, 0xf4,
	0x53, 0x34, 0x6d, 0xf3, 0x14, 0x3d, 0xf7, 0x15, 0xda, 0x8b, 0x1e, 0xef, 0xfb, 0x18, 0xbd, 0x68,
	0xda, 0xdb, 0xce, 0x1e, 0x48, 0x42, 0x94, 0xc3, 0xd8, 0x57, 0xdc, 0xff, 0xf4, 0xfd, 0xe7, 0x5d,
	0x0c, 0xe1, 0xd1, 0x20, 0x64, 0x91, 0x7f, 0x5c, 0x1f, 0xbf, 0xac, 0x8f, 0x69, 0x3c, 0xa6, 0x2c,
	0x1c, 0xd2, 0x7a, 0x3f, 0x19, 0x3e, 0x3c, 0x0b, 0x47, 0x34, 0x7d, 0xd8, 0x4f, 0x86, 0xc3, 0x24,
	0xf6, 0x47, 0xe1, 0xf8, 0xe1, 0xe8, 0x38, 0x43, 0xd5, 0x47, 0x69, 0xc2, 0x12, 0xbc, 0xbb, 0xb0,
	0x11, 0xfa, 0xf5, 0x85, 0xc6, 0xee, 0xed, 0x41, 0x92, 0x0c, 0x22, 0xfa, 0x50, 0x68, 0x1e, 0x4f,
	0x4e, 0x1e, 0x72, 0xb5, 0x31, 0xf3, 0x87, 0x23, 0x69, 0xbc, 0x7b, 0x6b, 0x59, 0x21, 0x98, 0xa4,
	0x3e, 0x0b, 0x93, 0x58, 0xca, 0x6b, 0x77, 0xa1, 0xfc, 0x94, 0xa6, 0x8c, 0xbe, 0xc0, 0x1b, 0x90,
	0x7b, 0xb1, 0x9d, 0xbb, 0x93, 0xbb, 0x57, 0x22, 0x39, 0x41, 0x4d, 0xb7, 0xf3, 0x92, 0x9a, 0xd6,
	0xde, 0x85, 0x8a, 0xd4, 0xda, 0x6b, 0x2f, 0xf4, 0xf2, 0xe7, 0xf4, 0xf2, 0x5c, 0xef, 0x3b, 0x50,
	0x74, 0xc2, 0x97, 0x14, 0x5f, 0x83, 0xd2, 0x27, 0x61, 0xc0, 0x4e, 0x15, 0x9e, 0x24, 0xf0, 0x75,
	0x28, 0x9f, 0xd2, 0x70, 0x70, 0xca, 0x14, 0xb0, 0xa2, 0x64, 0x0c, 0x7d, 0x96, 0xa4, 0x2b, 0xb1,
	0x2d, 0xd8, 0x68, 0x24, 0x93, 0x38, 0x08, 0xe3, 0x41, 0x2f, 0x89, 0xa6, 0xf8, 0x3d, 0xa8, 0x9c,
	0xd1, 0x94, 0x85, 0x7d, 0x3a, 0xde, 0xce, 0xdd, 0x29, 0xdc, 0x5b, 0xdf, 0xab, 0xd5, 0xbf, 0xb8,
	0x52, 0x75, 0x19, 0x3f, 0x99, 0xdb, 0xd4, 0x9e, 0xc0, 0xa5, 0x2c, 0x5e, 0x1b, 0xbf, 0x7f, 0x01,
	0xf0, 0xee, 0x97, 0x03, 0xee, 0xb5, 0x33, 0x90, 0xcf, 0xa1, 0xea, 0x86, 0x43, 0x4a, 0xfc, 0x78,
	0x40, 0xf1, 0x37, 0xa1, 0x34, 0x66, 0x7e, 0xca, 0x44, 0x3e, 0xeb, 0x7b, 0xbb, 0x75, 0xd9, 0x89,
	0xfa, 0xac, 0x13, 0x75, 0x77, 0xd6, 0x2a, 0x22, 0x15, 0xf1, 0x03, 0x28, 0xd0, 0x38, 0x10, 0x19,
	0xaf, 0xd6, 0xe7, 0x6a, 0xb5, 0x26, 0x94, 0xb4, 0x78, 0x10, 0x51, 0x8c, 0xa0, 0x30, 0xf5, 0x3f,
	0x51, 0x65, 0xe3, 0x47, 0x5e, 0xfe, 0x51, 0xc8, 0xfa, 0xa7, 0xaa, 0x78, 0x92, 0xc0, 0x18, 0x8a,
	0x69, 0x12, 0x45, 0xdb, 0x05, 0xc1, 0x14, 0xe7, 0xda, 0x13, 0x58, 0xb7, 0xd3, 0x90, 0xc6, 0x4c,
	0xcc, 0x04, 0xde, 0x86, 0x35, 0xff, 0x65, 0x38, 0x9c, 0xa8, 0xce, 0xe5, 0xc9, 0x8c, 0x7c, 0x03,
	0xc8, 0x18, 0x4a, 0xc6, 0xd0, 0x1f, 0x50, 0xfc, 0x13, 0x28, 0x9f, 0x24, 0xe9, 0xd0, 0x97, 0x15,
	0xd8, 0xdc, 0xfb, 0xfa, 0xaa, 0x6a, 0x0a, 0x93, 0xb6, 0x50, 0x27, 0xca, 0x8c, 0xa3, 0x07, 0x3e,
	0xf3, 0x85, 0xcb, 0x0d, 0x22, 0xce, 0x3c, 0xd9, 0x49, 0x2a, 0x1d, 0x56, 0x09, 0x3f, 0xf2, 0x3e,
	0xda, 0xc7, 0x1f, 0xd3, 0x3e, 0x6b, 0x53, 0x9f, 0x4d, 0x52, 0xca, 0xcd, 0xd8, 0x74, 0x44, 0x85,
	0xd7, 0x2a, 0x11, 0x67, 0x9e, 0xd8, 0x19, 0x4d, 0xc7, 0x61, 0x12, 0xab, 0xd9, 0x9b, 0x91, 0x5c,
	0xfb, 0x38, 0x4a, 0x8e, 0x05, 0xe2, 0x06, 0x11, 0xe7, 0xda, 0x1f, 0xf3, 0xb0, 0xd5, 0x4b, 0x52,
	0x96, 0xfa, 0x21, 0x13, 0x81, 0x99, 0x49, 0x5f, 0x16, 0x88, 0xc0, 0xb5, 0x91, 0x1f, 0x27, 0xa9,
	0x3f, 0x0c, 0xfb, 0x5e, 0xc8, 0x45, 0xde, 0x38, 0x7c, 0x49, 0x55, 0x8f, 0xef, 0xac, 0xca, 0x90,
	0x2f, 0x06, 0xc1, 0x73, 0x6b, 0x81, 0x2b, 0x96, 0x65, 0x00, 0x37, 0x47, 0xca, 0x99, 0x82, 0x0c,
	0x63, 0x6f, 0xae, 0xa7, 0xc6, 0xe1, 0xde, 0x2a, 0xe8, 0xec, 0x1c, 0x93, 0xed, 0x51, 0x36, 0x72,
	0x23, 0xee, 0xcd, 0x90, 0xf0, 0x47, 0xb0, 0xb5, 0x70, 0x94, 0x75, 0x51, 0x78, 0x43, 0x17, 0x57,
	0xe7, 0x2e, 0x16, 0xe8, 0xb5, 0x3f, 0x15, 0x01, 0xb9, 0x7e, 0x3a, 0xa0, 0x4c, 0x8b, 0xe3, 0x64,
	0x31, 0x50, 0x3f, 0x9d, 0xf8, 0x51, 0xc8, 0xa6, 0xb3, 0x81, 0x52, 0x24, 0x6e, 0x43, 0x35, 0xa5,
	0x7d, 0xe6, 0xf3, 0x11, 0x7e, 0xe3, 0x1c, 0x17, 0xa6, 0x78, 0x07, 0x2a, 0x2c, 0xf5, 0xfb, 0xcf,
	0xbd, 0x30, 0x10, 0x79, 0x14, 0xc8, 0x9a, 0xa0, 0x8d, 0x00, 0x7f, 0x0f, 0x4a, 0x12, 0xbe, 0x28,
	0xe0, 0xbf, 0xb2, 0x0a, 0x5e, 0xac, 0x12, 0x91, 0xfa, 0xf3, 0x09, 0x2a, 0x65, 0x26, 0xe8, 0x7d,
	0xa8, 0x46, 0x7e, 0x1c, 0x0c, 0xfd, 0xf4, 0xf9, 0x78, 0xbb, 0xfc, 0xda, 0xf7, 0xcd, 0xc2, 0x08,
	0x7f, 0x04, 0xe0, 0x33, 0x96, 0x86, 0xc7, 0x13, 0x46, 0xc7, 0xdb, 0x6b, 0x02, 0xe2, 0xd1, 0x2a,
	0x88, 0xe5, 0x6a, 0xd6, 0xb5, 0xb9, 0xb9, 0x1e, 0xb3, 0x74, 0x4a, 0x32, 0x78, 0x38, 0x84, 0x1b,
	0x4b, 0x53, 0x14, 0xa9, 0xa1, 0xdd, 0xae, 0x88, 0xf4, 0xbf, 0xb5, 0xca, 0xd5, 0x2b, 0xa7, 0x9d,
	0x6c, 0x8d, 0x5e, 0xb9, 0x04, 0x37, 0xa1, 0x9a, 0x88, 0x8d, 0xe3, 0x35, 0xaf, 0x8a, 0x1a, 0x55,
	0x24, 0xc3, 0x08, 0x76, 0x7f, 0x0c, 0x97, 0x97, 0xc2, 0xe4, 0x3b, 0xfb, 0x9c, 0x4e, 0xd5, 0x3e,
	0xf2, 0x23, 0xbf, 0x4d, 0xce, 0xfc, 0x68, 0x22, 0x1b, 0x5f, 0x25, 0x92, 0xf8, 0x61, 0xfe, 0xfb,
	0xb9, 0xda, 0x67, 0x79, 0xa8, 0xea, 0x67, 0x34, 0x66, 0x64, 0x12, 0x51, 0xfc, 0x83, 0xcc, 0x2a,
	0x6f, 0xee, 0x7d, 0x6d, 0x55, 0x06, 0xc2, 0xc8, 0x9d, 0x8e, 0xa8, 0xea, 0xd7, 0x0d, 0x58, 0x4b,
	0x27, 0x11, 0xe5, 0x21, 0x4a, 0x27, 0x65, 0x4e, 0x1a, 0x01, 0xfe, 0x11, 0x14, 0xd2, 0x24, 0x54,
	0x33, 0xff, 0x8d, 0xd7, 0x1d, 0xb9, 0x36, 0xe1, 0x56, 0xf8, 0xbb, 0x50, 0x99, 0x3d, 0xa0, 0x6a,
	0xaa, 0x76, 0x2e, 0xdc, 0xd3, 0x2d, 0xa5, 0x40, 0xe6, 0xaa, 0x7c, 0x78, 0x82, 0x90, 0xcf, 0x2c,
	0xb7, 0x2b, 0x09, 0xbb, 0x2f, 0x19, 0x1e, 0xfe, 0x1c, 0x92, 0x85, 0x51, 0xcd, 0x02, 0xd4, 0xf4,
	0x87, 0x34, 0xf5, 0x8d, 0x80, 0xc6, 0x2c, 0x3c, 0x09, 0x69, 0xca, 0xfb, 0x90, 0xd2, 0x41, 0x98,
	0xc4, 0x3c, 0x49, 0xf9, 0xd2, 0x56, 0x24, 0xc3, 0x08, 0xf0, 0x3b, 0x00, 0x7d, 0x61, 0xe0, 0x85,
	0xc1, 0x0b, 0x75, 0xe9, 0x55, 0xfb, 0x0a, 0xe2, 0x45, 0xcd, 0x84, 0x72, 0xcf, 0x1f, 0x84, 0xf1,
	0x80, 0xbf, 0xca, 0xc9, 0xc9, 0xc9, 0x98, 0x32, 0x05, 0xa1, 0x28, 0xde, 0xa3, 0x28, 0x1c, 0x86,
	0xb3, 0xc7, 0x5a, 0x12, 0x9c, 0xcb, 0x12, 0xe6, 0xcb, 0x1b, 0xb8, 0x44, 0x24, 0x51, 0xfb, 0x77,
	0x1e, 0x40, 0x85, 0x17, 0x9f, 0x24, 0x3c, 0xb0, 0xb9, 0x6f, 0xd5, 0xf6, 0xca, 0xcc, 0x35, 0x17,
	0x06, 0xf4, 0x2c, 0xec, 0x67, 0x5a, 0x53, 0x91, 0x0c, 0x23, 0xc0, 0xb7, 0x61, 0x5d, 0x09, 0x45,
	0xdf, 0xe5, 0x35, 0x0f, 0x92, 0xc5, 0x9b, 0xcb, 0xd3, 0x1a, 0x45, 0x7e, 0x9f, 0x7a, 0xfd, 0x24,
	0x90, 0x8b, 0x5d, 0x25, 0x55, 0xc1, 0x69, 0x26, 0x41, 0x46, 0x1c, 0xfb, 0xc3, 0xd9, 0xfe, 0x4a,
	0xb1, 0xe5, 0x0f, 0x29, 0x87, 0x67, 0x49, 0x14, 0x0d, 0x7c, 0x26, 0xbc, 0x97, 0x25, 0xfc, 0x8c,
	0x65, 0x04, 0xf8, 0xab, 0x70, 0x69, 0xae, 0x20, 0x20, 0xd6, 0x84, 0xca, 0xc6, 0x8c, 0x29, 0x50,
	0x6e, 0x42, 0x75, 0x9c, 0x4c, 0x52, 0x99, 0x41, 0x45, 0x66, 0x20, 0x19, 0x46, 0x80, 0xbb, 0xb0,
	0x1e, 0xc6, 0x8c, 0xa6, 0xb1, 0x1f, 0xcd, 0xd6, 0x63, 0x7d, 0xef, 0xc1, 0xaa, 0x66, 0x2f, 0xf7,
	0x95, 0xc0, 0x0c, 0xc0, 0x08, 0xf8, 0x18, 0xbf, 0x4c, 0x62, 0xe1, 0x09, 0xe4, 0x18, 0x73, 0xd2,
	0x08, 0x6a, 0x29, 0x94, 0x09, 0x1d, 0x4f, 0x22, 0xf1, 0x4c, 0x8a, 0x62, 0xc8, 0xf6, 0x89, 0x33,
	0x6f, 0x13, 0x4d, 0xd3, 0x24, 0x9d, 0x2d, 0x98, 0x20, 0xf0, 0x7b, 0x50, 0x1e, 0x33, 0x9f, 0x4d,
	0xc6, 0xa2, 0xb0, 0x9b, 0x7b, 0xef, 0xae, 0x7c, 0xaf, 0x84, 0x26, 0xaf, 0x2a, 0x51, 0x56, 0xb5,
	0x16, 0x54, 0x3a, 0x34, 0xe9, 0x25, 0x61, 0xcc, 0xf0, 0x2e, 0x54, 0x22, 0x9f, 0x85, 0x6c, 0xa2,
	0x3c, 0xe7, 0xc8, 0x9c, 0xc6, 0x6f, 0x43, 0x35, 0x4a, 0xe2, 0x81, 0x14, 0xe6, 0x85, 0x70, 0xc1,
	0xa8, 0x59, 0x00, 0x02, 0x25, 0x9a, 0x0e, 0xc4, 0x6a, 0xbc, 0xd1, 0x57, 0xd7, 0xcc, 0x7f, 0xe6,
	0xab, 0xeb, 0x11, 0x54, 0x1f, 0x3b, 0xb6, 0xd5, 0x6b, 0x68, 0xf1, 0x54, 0x3c, 0x07, 0xd3, 0x11,
	0xf5, 0xf8, 0x47, 0x82, 0x9c, 0xbc, 0x35, 0x4e, 0x1f, 0xa6, 0xd1, 0xab, 0x2f, 0x9d, 0xfb, 0x43,
	0x58, 0xcf, 0x7c, 0x7b, 0xe0, 0x2b, 0x70, 0xc9, 0xe8, 0x6a, 0x1d, 0xdd, 0x3b, 0xb4, 0x0e, 0x2c,
	0xfb, 0x99, 0x85, 0xde, 0xc2, 0x9b, 0x00, 0x92, 0xf5, 0xb8, 0xa7, 0x77, 0x50, 0x0e, 0x5f, 0x82,
	0xaa, 0xa4, 0x7b, 0x56, 0x07, 0xe5, 0x17, 0x64, 0xa3, 0xdb, 0x43, 0x85, 0x85, 0xb6, 0x6b, 0xb4,
	0xdb, 0xa8, 0xb8, 0x10, 0x77, 0x8c, 0x36, 0x2a, 0xdd, 0xff, 0x73, 0x01, 0x40, 0x7e, 0xae, 0x88,
	0x71, 0xc6, 0xb0, 0x69, 0x37, 0x1e, 0xeb, 0x4d, 0x37, 0xe3, 0xef, 0x32, 0xac, 0x2b, 0x5e, 0x5b,
	0x6b, 0xea, 0x28, 0x87, 0xb7, 0xe0, 0x8a, 0x62, 0xf4, 0xf4, 0x96, 0xee, 0xb8, 0xc4, 0xd0, 0x2c,
	0x94, 0xcf, 0xb0, 0xb5, 0x43, 0xd7, 0xee, 0xda, 0x0d, 0xc3, 0xd4, 0x51, 0x21, 0x03, 0xd9, 0x3c,
	0x6a, 0x9a, 0x86, 0xe3, 0xa2, 0x22, 0xbe, 0x03, 0x6f, 0x2b, 0xde, 0xfe, 0x61, 0x57, 0xb3, 0xbc,
	0x9e, 0xfd, 0x4c, 0x27, 0x7a, 0xcb, 0x7b, 0xaa, 0xef, 0x1b, 0x4d, 0x53, 0x47, 0x25, 0x7c, 0x15,
	0x2e, 0x2b, 0x0d, 0xa7, 0xa9, 0x5b, 0x1a, 0x31, 0x6c, 0x54, 0xc6, 0x08, 0x36, 0x66, 0x50, 0xc4,
	0x7e, 0xd6, 0x42, 0x6b, 0x99, 0xd8, 0x34, 0xb3, 0x63, 0xa3, 0x4a, 0x26, 0x88, 0xee, 0xa1, 0xe9,
	0x1a, 0x5e, 0x4f, 0x6b, 0xee, 0x23, 0xbe, 0x47, 0xb7, 0x97, 0xe0, 0xbc, 0xa6, 0xe1, 0x1e, 0x79,
	0x5d, 0xcd, 0xd2, 0x3a, 0x7a, 0x57, 0xb7, 0x5c, 0x44, 0xf1, 0x2e, 0x5c, 0xcf, 0x24, 0x9a, 0x4d,
	0xee, 0x04, 0xdf, 0x85, 0x3b, 0xcb, 0x00, 0x8b, 0x2c, 0x3d, 0x77, 0x9f, 0xd8, 0xcf, 0xd0, 0x20,
	0x83, 0x20, 0xbd, 0x4b, 0x1c, 0x1e, 0xc2, 0x69, 0x26, 0x04, 0x97, 0x68, 0xed, 0xb6, 0xd1, 0xcc,
	0x02, 0x34, 0xed, 0x43, 0xcb, 0x45, 0x21, 0x7e, 0x07, 0x76, 0x96, 0x94, 0x32, 0x69, 0x7c, 0x8c,
	0x6f, 0xc0, 0xd5, 0x73, 0x75, 0xd3, 0x9a, 0xae, 0x61, 0x5b, 0xe8, 0xf9, 0xfd, 0x5f, 0xe5, 0xd4,
	0x33, 0x25, 0xba, 0x78, 0x05, 0x2e, 0xe9, 0x4f, 0x75, 0x2b, 0xdb, 0xc4, 0x1d, 0xd8, 0x92, 0xac,
	0x45, 0x56, 0x9e, 0xe3, 0x6a, 0x47, 0x28, 0xc7, 0x83, 0xbe, 0x20, 0xda, 0xb7, 0x9f, 0xea, 0x04,
	0xe5, 0xf1, 0x6d, 0xb8, 0x79, 0x41, 0xd6, 0x24, 0xb6, 0xe3, 0x78, 0xa6, 0x61, 0xf1, 0xee, 0xde,
	0x84, 0x1b, 0x17, 0x14, 0x0c, 0xeb, 0xa9, 0xd6, 0xd2, 0x51, 0x11, 0x5f, 0x07, 0x2c, 0x85, 0xaa,
	0xaf, 0x5e, 0x4f, 0x23, 0x07, 0xa8, 0x74, 0xff, 0xf3, 0x1c, 0x6c, 0x38, 0x7d, 0x1a, 0xfb, 0x69,
	0x98, 0x88, 0x80, 0x37, 0x01, 0x9c, 0x6c, 0xb4, 0x1b, 0x50, 0x71, 0x5c, 0x1e, 0x9f, 0x69, 0xa2,
	0x1c, 0x5e, 0x87, 0x35, 0xc7, 0xf5, 0xda, 0x06, 0xd1, 0xe5, 0x78, 0x73, 0x91, 0x69, 0x77, 0x34,
	0x0b, 0x15, 0x78, 0xbf, 0x1d, 0xd7, 0x33, 0x35, 0xab, 0xe5, 0x34, 0xb5, 0x9e, 0xee, 0x99, 0x5a,
	0xb7, 0x87, 0x8a, 0x0a, 0xb0, 0x69, 0x1e, 0xba, 0xae, 0x4e, 0x50, 0x89, 0x57, 0xc4, 0x71, 0x3d,
	0x62, 0x6b, 0x2d, 0xaf, 0x69, 0xea, 0x9a, 0x85, 0xca, 0x0a, 0xd5, 0xb1, 0x0d, 0x13, 0xad, 0x29,
	0xfd, 0x8e, 0x46, 0x1a, 0x5a, 0x47, 0x97, 0x63, 0xc4, 0x85, 0xfb, 0x1a, 0x9f, 0xca, 0x86, 0xc1,
	0x27, 0x57, 0x47, 0x55, 0x7c, 0x0b, 0x76, 0x2f, 0xb0, 0xbd, 0xae, 0xe1, 0xd8, 0xa4, 0xa5, 0x13,
	0x04, 0x2a, 0x38, 0xc3, 0x6a, 0xd9, 0x36, 0x41, 0xeb, 0x0a, 0xd5, 0xe9, 0xda, 0x07, 0x86, 0xd5,
	0x41, 0x1b, 0xf7, 0x3f, 0x2d, 0x02, 0x2c, 0xae, 0x31, 0x5c, 0x86, 0xbc, 0x7d, 0x80, 0xde, 0xc2,
	0xdb, 0x70, 0xcd, 0x39, 0x72, 0x5c, 0xbd, 0x3b, 0xab, 0x80, 0xa7, 0x13, 0x62, 0x13, 0x44, 0x33,
	0x12, 0x4b, 0x77, 0x9f, 0xd9, 0xe4, 0x40, 0x49, 0x4e, 0x32, 0x12, 0xc7, 0xb5, 0x09, 0xdf, 0x67,
	0x29, 0x19, 0x64, 0x24, 0xa6, 0xd1, 0xd4, 0x2d, 0x67, 0x26, 0x39, 0xc5, 0x57, 0x60, 0xa3, 0xd5,
	0xf0, 0x2c, 0xdb, 0xf5, 0xda, 0xf6, 0xa1, 0xd5, 0x42, 0x7f, 0xe5, 0xab, 0x8c, 0x5a, 0x0d, 0xef,
	0x40, 0x3f, 0xca, 0xb0, 0xff, 0x96, 0xc3, 0xd7, 0xe1, 0x4a, 0xab, 0xe1, 0x69, 0x26, 0xd1, 0xb5,
	0xd6, 0x91, 0xa7, 0x7f, 0x60, 0x38, 0xae, 0x83, 0xfe, 0xce, 0x47, 0x65, 0x4b, 0xa9, 0x2f, 0xc9,
	0xfe, 0x91, 0xc3, 0x3b, 0x70, 0x4d, 0x8c, 0xfb, 0x1c, 0x88, 0x77, 0xcc, 0x71, 0xd1, 0x6f, 0xf2,
	0xdc, 0x6c, 0x49, 0xe4, 0xe8, 0x4d, 0xdb, 0x6a, 0xa1, 0xdf, 0xe6, 0xf1, 0x55, 0xd8, 0x3c, 0x2f,
	0x43, 0xbf, 0xe3, 0x57, 0x09, 0x12, 0xcc, 0x86, 0xd6, 0xf2, 0x9e, 0x1c, 0x6a, 0xa6, 0xe1, 0x1e,
	0xa1, 0xdf, 0xe7, 0xf1, 0x2d, 0xd8, 0x39, 0x77, 0x19, 0x7a, 0x6d, 0xbe, 0x3b, 0x6d, 0x9b, 0x74,
	0x35, 0x17, 0x7d, 0x5a, 0xc0, 0xb7, 0x61, 0xf7, 0xbc, 0xbc, 0x67, 0x7c, 0xa0, 0x9b, 0x33, 0x85,
	0x9f, 0x17, 0x78, 0x8c, 0x52, 0xc1, 0x31, 0x3e, 0xd4, 0x3d, 0xd7, 0xb6, 0x3d, 0xa7, 0xcb, 0x67,
	0xec, 0x17, 0xaf, 0x12, 0x99, 0x1a, 0xe9, 0xe8, 0xe8, 0x97, 0x7c, 0xc6, 0x90, 0xda, 0xba, 0x45,
	0x90, 0x9f, 0x17, 0xf0, 0x0d, 0xc0, 0x8a, 0x9d, 0x0d, 0xf3, 0xbf, 0x85, 0x5a, 0xb1, 0x92, 0x43,
	0x41, 0xad, 0x54, 0x09, 0xd1, 0x5f, 0x72, 0xb5, 0x72, 0xe5, 0x9f, 0x39, 0xf4, 0xeb, 0x7c, 0xad,
	0x5c, 0xf9, 0x43, 0x1e, 0xfd, 0xac, 0x50, 0x2b, 0x57, 0x3e, 0x2b, 0xa0, 0xff, 0xf0, 0xdf, 0xff,
	0x15, 0xd0, 0xbf, 0x8a, 0x0d, 0x0b, 0x6e, 0xf5, 0x93, 0xe1, 0x8a, 0x27, 0xe6, 0xc3, 0x07, 0xaf,
	0xfd, 0x6f, 0x8d, 0x3f, 0x0a, 0x8f, 0xcb, 0xe2, 0xbb, 0xef, 0xdb, 0xff, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0xb1, 0x9f, 0x73, 0xf7, 0xe4, 0x11, 0x00, 0x00,
}
