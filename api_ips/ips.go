package main

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"static_db_wf/common"
	"strings"

	"gitlab.sz.sensetime.com/viper/gosdkwrapper/feature"
)

type Request struct {
	Image                Image  `json:"image"`
	Face_selection       string `json:"face_selection"`
	Auto_rotation_thresh string `json:"auto_rotation_thresh"`
}
type Image struct {
	Format string `json:"format"`
	Data   string `json:"data"`
}
type Req struct {
	Request     []Request `json:"requests"`
	Detect_mode string    `json:"detect_mode"`
	Face_type   string    `json:"face_type"`
}

func StructTojson(path string) string {
	//实例化一个数据结构，用于生成json字符串
	image := Image{
		Format: "IMAGE_UNKNOWN",
		Data:   common.ChangeTobase(path),
	}

	request := Request{
		Image:                image,
		Face_selection:       "LargestFace",
		Auto_rotation_thresh: "1",
	}
	var requests []Request
	requests = append(requests, request)
	req := Req{
		Request:     requests,
		Detect_mode: "Default",
		Face_type:   "Large",
	}
	//fmt.Print(req)
	//Marshal失败时err!=nil
	reqjson, err := json.Marshal(req)
	if err != nil {
		fmt.Println("生成json字符串错误")
	}
	//fmt.Println(string(reqjson))
	//jsonStu是[]byte类型，转化成string类型便于查看
	return string(reqjson)
}
func main() {
	// var path string
	// var num string
	// for i := 1; i < 2; i++ {
	// 	num = fmt.Sprint(i)
	// 	path = `/Users/wufei1/Desktop/face/test` + num + `.jpeg`
	// 	post_ips(path, num)
	// }

	blob := base64.StdEncoding.EncodeToString()

	fmt.Print(blob)
}
func post_ips(path string, num int) []float32 {

	url := "http://172.20.25.180:30080/engine/image-process/face_25000/v1/batch_detect_and_extract"
	method := "POST"

	payload := strings.NewReader(StructTojson(path))
	//fmt.Print(payload)
	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)

	if err != nil {
		fmt.Println(err)
		return nil
	}
	req.Header.Add("Content-Type", "application/json")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	defer res.Body.Close()

	// body, err := ioutil.ReadAll(res.Body)
	// if err != nil {
	// 	fmt.Println(err)
	// 	return
	// }
	// fmt.Println(string(body))
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	var params AutoGenerated
	err = json.Unmarshal(body, &params)
	var blob = params.Responses[0].Feature.Blob
	feature, err := getRawFeatureFromBase64(blob)
	return feature.Raw

}
func pose_wf(vector string) {

	url := "http://localhost:9090/add"
	method := "POST"

	payload := strings.NewReader(`{
	  "type":"add",
	  "vectors":vector
	  
  }`)

	client := &http.Client{}
	req, err := http.NewRequest(method, url, payload)

	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Add("Content-Type", "application/json")

	res, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(string(body))
}

// func test(){
// if err != nil {
// 	fmt.Println(err)
// 	return
// }
// index1 := gojsonq.New().FromString(string(body)).From("responses").First()
// interface2String(index1)
// fmt.Print(index1)
// index2 := gojsonq.New().FromString(index1).Find("feature")
// fmt.Print(index2)
// index3 := index2.Get().(map[string]interface{})
// feature, ok := params.(map[string]interface{}) //.(map[string]interface{})["feature"].(map[string]interface{})["blob"]
// if !ok {
// 	fmt.Println("1")
// 	return
// }
// feature1, ok := feature["responses"].(map[string]interface{})
// if !ok {
// 	fmt.Println("2")
// 	return
// }
// fmt.Print(feature1)
// strings.Split(index, ":")
// decoder := json.NewDecoder(res.Body)
// 用于存放参数key=value数据
// }

func interface2String(inter interface{}) {

	switch inter.(type) {

	case string:
		fmt.Println("string", inter.(string))

		break
	case int:
		fmt.Println("int", inter.(int))
		break
	case float64:
		fmt.Println("float64", inter.(float64))
		break
	}

}

// fmt.Println(string(body))
// var wf string
// wf = "U09GMahhAAAQAgAAAAEAAAAAAAAFAAAAAAAAAAAAAAASh1go3N8Aoh5rqugx5Ex5AcHPdST65xOB+B+vPIMnv/ZWitN2YytqSNf2NZsuV0wH1KMa2Sxo0opSZDi9imNSir5Q32YSM+wV3/SS52nVj0TZlb78ozaj37z6pr12Cc7xTRjE0ImvB1rSSTOkpLnZgF3ESwgm4DcZU4Apa4/yvsnn4I0hqqt9HGliY17qI5FKmsklYrx/3NRBKpzBILbYacF9toTelJrhmv6gzT0F08A9Tl4hB4CHOnPDKh7lmg8ccxSLCrhtPGNaNXcTnZvEpqOn+A67QywWFNKJjd/VjPT/O+tAtAkyc/zqxyLZ6kcsqCh4ncDgaLkzi6pjZKRJuamVksAFRjRvD55u4dlNjgjlnXPXOJQWE/of4EJ2DH1dfq88xsm39oVGorr+08uUTSHvZuMj3n5x73/62VWzUorLqdaETc9lpeVxa8DFADSDz2rukTlr0nlbz0ua0nVzgAjUQws7UxDb8q0u19s4auIi/W9IbkGPVzvwHG14nuRz57Kj6zeFQX77J4JOyDpzcFMSZ5STzfhq7vA4uTn9hL0WmoSbqIMv43u/Sqp4CcAX48Nc31UCvSIofVAkmjeZ/pTTvJp/h7q5k2R6fuE8E3MUdrTwMpjWzHWdfHJQwf194LU8wuG03WTAYfgs42UVw4xz2FroLqgyAjPRo8+K3uJVbyj1kyicb1WItOCxPM8="
// data, err := getRawFeatureFromBase64(wf)
// if err != nil {
// 	fmt.Errorf("出问题")
// } else {
// 	fmt.Print(data)

func getRawFeatureFromBase64(feat string) (*feature.RawFeature, error) {
	blob, err := base64.StdEncoding.DecodeString(feat)
	if err != nil {
		return nil, err
	}
	pf, err := feature.NewPersistedFeatureFromBytes(blob, false)
	if err != nil {
		return nil, err
	}
	fdec, err := feature.NewDecoder([]byte("1234567890123456"))
	if err != nil {
		return nil, err
	}
	raw, err := fdec.Decode(pf)
	if err != nil {
		return nil, err
	}

	return &raw, nil
}

type AutoGenerated struct {
	Results []struct {
		Code   string `json:"code"`
		Error  string `json:"error"`
		Status string `json:"status"`
	} `json:"results"`
	Responses []struct {
		FaceInfo struct {
			Type string `json:"type"`
			Face struct {
				Quality   string `json:"quality"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				TrackID string `json:"track_id"`
				Angle   struct {
					Yaw   string `json:"yaw"`
					Pitch string `json:"pitch"`
					Roll  string `json:"roll"`
				} `json:"angle"`
				Landmarks []struct {
					X string `json:"x"`
					Y string `json:"y"`
				} `json:"landmarks"`
				Attributes struct {
				} `json:"attributes"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
				FaceScore string `json:"face_score"`
			} `json:"face"`
			Pedestrian struct {
				Quality   string `json:"quality"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				TrackID             string `json:"track_id"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
				PedestrianScore string `json:"pedestrian_score"`
			} `json:"pedestrian"`
			Automobile struct {
				Quality   string `json:"quality"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				TrackID             string `json:"track_id"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
			} `json:"automobile"`
			HumanPoweredVehicle struct {
				Quality   string `json:"quality"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				TrackID             string `json:"track_id"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
			} `json:"human_powered_vehicle"`
			Cyclist struct {
				Quality   string `json:"quality"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				TrackID             string `json:"track_id"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
			} `json:"cyclist"`
			Crowd struct {
				Quantity string `json:"quantity"`
				Incident []struct {
					ID         string `json:"id"`
					Type       string `json:"type"`
					Status     string `json:"status"`
					StartTime  string `json:"start_time"`
					StopTime   string `json:"stop_time"`
					UpdateTime string `json:"update_time"`
					UUID       string `json:"uuid"`
				} `json:"incident"`
				DensitySize struct {
					Width  string `json:"width"`
					Height string `json:"height"`
				} `json:"density_size"`
				DensityMap string `json:"density_map"`
				StrandMap  struct {
					Format string `json:"format"`
					Data   string `json:"data"`
					URL    string `json:"url"`
				} `json:"strand_map"`
				FullHeadTargets struct {
					HeadTargets []struct {
						Coordinate struct {
							X string `json:"x"`
							Y string `json:"y"`
						} `json:"coordinate"`
						Rectangle struct {
							Vertices []struct {
								X string `json:"x"`
								Y string `json:"y"`
							} `json:"vertices"`
						} `json:"rectangle"`
					} `json:"head_targets"`
				} `json:"full_head_targets"`
			} `json:"crowd"`
			Event struct {
				EventID string `json:"event_id"`
				Rule    struct {
					Type   string `json:"type"`
					RuleID string `json:"rule_id"`
					Roi    struct {
						Vertices []struct {
							X string `json:"x"`
							Y string `json:"y"`
						} `json:"vertices"`
					} `json:"roi"`
					Duration  string `json:"duration"`
					Direction struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"direction"`
				} `json:"rule"`
				EventStatus string `json:"event_status"`
				EventType   string `json:"event_type"`
				Rectangle   struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
				AttributesWithScore struct {
				} `json:"attributes_with_score"`
			} `json:"event"`
			PortraitImageLocation struct {
				PanoramicImageSize struct {
					Width  string `json:"width"`
					Height string `json:"height"`
				} `json:"panoramic_image_size"`
				PortraitImageInPanoramic struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"portrait_image_in_panoramic"`
				PortraitInPanoramic struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"portrait_in_panoramic"`
			} `json:"portrait_image_location"`
			ObjectID     string `json:"object_id"`
			Associations []struct {
				Type            string `json:"type"`
				ObjectID        string `json:"object_id"`
				AssociationType string `json:"association_type"`
			} `json:"associations"`
			Algo struct {
				AppName       string `json:"app_name"`
				AppVersion    string `json:"app_version"`
				ObjectType    string `json:"object_type"`
				ObjectVersion string `json:"object_version"`
				Data          struct {
					TypeURL string `json:"type_url"`
					Value   string `json:"value"`
				} `json:"data"`
				Rectangle struct {
					Vertices []struct {
						X string `json:"x"`
						Y string `json:"y"`
					} `json:"vertices"`
				} `json:"rectangle"`
			} `json:"algo"`
			Diagnosis struct {
				TypeFrame         string `json:"type_frame"`
				DiagnoseSummaries []struct {
					DiagnosisItem string `json:"diagnosis_item"`
					TypeItem      string `json:"type_item"`
					Score         string `json:"score"`
				} `json:"diagnose_summaries"`
			} `json:"diagnosis"`
		} `json:"face_info"`
		Feature struct {
			Type    string `json:"type"`
			Version string `json:"version"`
			Blob    string `json:"blob"`
		} `json:"feature"`
		ImagesOrientation string `json:"images_orientation"`
	} `json:"responses"`
}
